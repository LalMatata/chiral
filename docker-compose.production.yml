version: '3.8'

services:
  # Nginx反向代理和静态文件服务
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./dist:/usr/share/nginx/html
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - chiral-network

  # Flask后端API服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://chiral_user:${DB_PASSWORD}@postgres:5432/chiral_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - HUBSPOT_ACCESS_TOKEN=${HUBSPOT_ACCESS_TOKEN}
      - CORS_ORIGINS=https://chiral-robotics.com,https://www.chiral-robotics.com
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    restart: unless-stopped
    networks:
      - chiral-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL主数据库
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=chiral_db
      - POSTGRES_USER=chiral_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/backups:/backups
    restart: unless-stopped
    networks:
      - chiral-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chiral_user -d chiral_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存和会话存储
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - chiral-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery异步任务处理
  celery-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A src.main.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://chiral_user:${DB_PASSWORD}@postgres:5432/chiral_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - HUBSPOT_ACCESS_TOKEN=${HUBSPOT_ACCESS_TOKEN}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    networks:
      - chiral-network

  # Celery定时任务调度
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A src.main.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://chiral_user:${DB_PASSWORD}@postgres:5432/chiral_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    restart: unless-stopped
    networks:
      - chiral-network

  # 数据库备份服务
  backup:
    image: postgres:14-alpine
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./postgres/backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: >
      sh -c "
        chmod +x /backup.sh &&
        while true; do
          /backup.sh
          sleep 86400
        done
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - chiral-network

  # 监控和健康检查
  healthcheck:
    image: curlimages/curl:latest
    command: >
      sh -c "
        while true; do
          curl -f http://nginx/api/health || echo 'Health check failed'
          sleep 300
        done
      "
    depends_on:
      - nginx
      - backend
    restart: unless-stopped
    networks:
      - chiral-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  chiral-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

